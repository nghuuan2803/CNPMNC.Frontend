@page "/product"
@page "/supplier"
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ProductService Service
@inject SuplierService SuplierService
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Net.Http.Json
@using AdminUI.ApiServices
@using AdminUI.Dialogs.Suplier
@using ClosedXML.Excel;
@inject AuthenticationStateProvider AuthenticationStateProvider
@using AdminUI.Pages


<MudTabs Outlined="true" Centered="true">
    <MudTabPanel Text="Sản phẩm" Icon="@Icons.Material.Filled.Api">
        <div class="pt-10 px-10">
            <MudDataGrid T="ProductModel" ReadOnly="false" EditMode="DataGridEditMode.Form" QuickFilter="@_quickFilter"
                         Bordered="false" Dense="true" Items="Data" Filterable="false" Hover="true" RowClick="OnRowClick"
                         EditTrigger="DataGridEditTrigger.Manual" ColumnResizeMode="ResizeMode.Column" SelectedItem="tempItem" CommittedItemChanges="OpenEditProductDialog"
                         Virtualize="true" Loading="loading" Height="400px" FixedHeader="true">
                <ToolBarContent>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudTooltip Text="Thêm sản phẩm">
                            <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="OpenDialogAsync"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Nhập từ file excel">
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                <ActivatorContent>
                                    <MudIconButton Icon="@Icons.Material.Filled.FilePresent"></MudIconButton>
                                </ActivatorContent>
                            </MudFileUpload>
                        </MudTooltip>
                        <MudTooltip Text="Download excel">
                            <MudIconButton Icon="@Icons.Material.Filled.Download" OnClick="ExportToExcel"></MudIconButton>
                        </MudTooltip>
                    </MudButtonGroup>
                    <MudSpacer />

                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.End" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="ml-1"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Class="w-1" Property="x => x.Id" Title="Mã sản phẩm" Editable="false" />
                    <PropertyColumn Property="x => x.Name" Title="Tên sản phẩm" />
                    <PropertyColumn Format="#,0 đ" Property="@(x => x.Price)" Title="Đơn giá" />
                    <PropertyColumn Property="x => x.Quantity" Title="Tồn kho" Editable="false" />
                    <TemplateColumn Hidden="false" StickyRight="false" Class="w-1" CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning" OnClick="()=> OpenEditProductDialog(context.Item)" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="()=> ShowDeleteConfirmation(context.Item)" />
                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Dark" OnClick="()=> ShowDeleteConfirmation(context.Item)" /> *@
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ProductModel" />
                </PagerContent>
            </MudDataGrid>
        </div>
    </MudTabPanel>
    <MudTabPanel Text="Danh mục" Icon="@Icons.Material.Filled.BugReport">

    </MudTabPanel>
    <MudTabPanel Text="Nhãn hàng" Icon="@Icons.Material.Filled.BugReport">

    </MudTabPanel>
    <MudTabPanel Text="Nhà cung cấp" Icon="@Icons.Material.Filled.Api">
        <div class="pt-10 px-10">
            <MudDataGrid T="SuplierModel" Items="supliers" RowClick="OnSuplierRowClick" Dense="true" EditMode="DataGridEditMode.Form" SelectedItem="sp"
                         EditTrigger="DataGridEditTrigger.Manual" ColumnResizeMode="ResizeMode.Column" CommittedItemChanges="OpenEditSuplierDialog">

                <ToolBarContent>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudTooltip Text="Thêm nhà cung cấp">
                            <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="OpenAddSuplierDialogAsync"></MudIconButton>
                        </MudTooltip>
                    </MudButtonGroup>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.End" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="ml-1"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="p=>p.Id" Title="#" />
                    <PropertyColumn Property="p=>p.Name" Title="Tên" />
                    <PropertyColumn Property="p=>p.Address" Title="Địa chỉ" />
                    <PropertyColumn Property="p=>p.Email" />
                    <PropertyColumn Property="p=>p.PhoneNumber" Title="SĐT" />
                    <PropertyColumn Property="p=>p.ContactPerson" Title="Liên Hệ" />
                    <TemplateColumn Hidden="false" StickyRight="false" Class="w-1" CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning" OnClick="()=> OpenEditSuplierDialog(context.Item)" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="()=> ShowDeleteSuplierConfirm(context.Item)" />
                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Dark" OnClick="()=> ShowDeleteConfirmation(context.Item)" /> *@
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="SuplierModel" />
                </PagerContent>
            </MudDataGrid>

        </div>
    </MudTabPanel>
</MudTabs>

<script>
    window.downloadFileFromByteArray = (fileName, byteArray) => {
        // Tạo Blob từ byte array
        var blob = new Blob([byteArray], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
        var url = URL.createObjectURL(blob);

        // Tạo thẻ <a> để tải file xuống
        var anchor = document.createElement("a");
        anchor.href = url;
        anchor.download = fileName;

        // Thêm thẻ <a> vào DOM và click để tải file
        document.body.appendChild(anchor);
        anchor.click();

        // Sau đó xóa thẻ <a> đi để dọn dẹp
        document.body.removeChild(anchor);
        URL.revokeObjectURL(url);
    };
</script>
@code {
    private async Task OpenAddSuplierDialogAsync()
    {
        loading = true;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddSuplierDialog>("Thêm nhà cung cấp", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SuplierModel newSuplier)
        {
            // Thêm nhà cung cấp mới vào danh sách
            await Task.Delay(500);
            newSuplier.Id = await SuplierService.CreateSuplierAsync(newSuplier);
            if (newSuplier.Id != -1)
            {

                supliers.Insert(0, newSuplier);
                Snackbar.Add("Đã thêm nhà cung cấp thành công!", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Đã xảy ra lỗi :(", Severity.Error);
            }
        }
        loading = false;
    }
    void ShowDetailSuplier(SuplierModel item)
    {
        OpenDialogAsync();
    }
    private void OnSuplierRowClick(DataGridRowClickEventArgs<SuplierModel> args)
    {
        var selectedItem = args.Item; // Lấy nhà cung cấp được nhấp vào
        OpenViewDialog(selectedItem);  // Mở hộp thoại với dữ liệu nhà cung cấp
    }


    private void OpenViewDialog(SuplierModel suplier)
    {
        var parameters = new DialogParameters { ["suplier"] = suplier }; // Truyền thông tin nhà cung cấp
        DialogService.Show<ViewSuplierDialog>("Chi tiết nhà cung cấp", parameters); // Hiển thị hộp thoại
    }
    private List<SuplierModel> supliers = new List<SuplierModel>();
    private List<SuplierModel> filteredSupliers => supliers.Where(s =>
    s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
    s.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
    s.PhoneNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    private string searchTerm = string.Empty;
    SuplierModel SuplierItem = null;
    private async Task AddSuplier()
    {
        var newSuplier = new SuplierModel();
        await Http.PostAsJsonAsync("api/suppliers", newSuplier);
        supliers.Add(newSuplier);
    }
    #region fields - Properties
    private bool loading = true;
    private List<string> _events = new();
    public List<ProductModel> Data { get; set; } = new List<ProductModel>();
    public List<ProductModel> ExcelData { get; set; }
    string _searchString = null!;
    ProductModel tempItem = null!;
    SuplierModel sp;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    #endregion

    #region Life cycle
    protected async override Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     Navigation.NavigateTo("login");
        // }
        // if (!user.IsInRole("admin"))
        // {
        //     Navigation.NavigateTo("access-denied");
        // }
        try
        {
            await Task.Delay(300);
            loading = true;
            Data = await Service.GetAllAsync();
            supliers = await SuplierService.GetAllSupliersAsync();
        }
        catch
        {
            Snackbar.Add("Gọi API thất bại, vui lòng kiểm tra lại server!", Severity.Error);
            Snackbar.Add("Tạm thời sử dụng dữ liệu giả!", Severity.Warning);
            Data = await ProductService.GetFakeData();
        }
        finally
        {
            loading = false;
        }

    }
    #endregion



    #region Sự kiện
    private async void UploadFiles(IBrowserFile file)
    {
        if (file.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || file.ContentType == "application/vnd.ms-excel")
        {
            _files.Add(file);
            loading = true;
            StateHasChanged();
            var data = await ReadExcelFile(file);
            if (!data)
            {
                Snackbar.Add("Thông tin file không hợp lệ!", Severity.Error);
                loading = false;
                StateHasChanged();
                return;
            }
            var result = await Service.CreateMultipleAsync(ExcelData);
            if (result != null)
            {
                Data.InsertRange(0, result);
                Snackbar.Add("Nhập danh sách sản phẩm thành công!", Severity.Success);
                loading = false;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Thông tin file không hợp lệ!", Severity.Error);
            }
        }
        else
            Snackbar.Add("File không hợp lệ!", Severity.Error);
    }
    private async Task<bool> ReadExcelFile(IBrowserFile file)
    {
        try
        {
            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();

            // Đọc file từ stream không đồng bộ
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0; // Đặt lại vị trí của stream về đầu

            using var workbook = new XLWorkbook(memoryStream); // Sử dụng ClosedXML để mở file Excel

            var worksheet = workbook.Worksheet(1); // Giả sử dữ liệu nằm ở sheet đầu tiên
            int rowCount = worksheet.LastRowUsed().RowNumber(); // Lấy số hàng cuối cùng có dữ liệu

            // Xóa danh sách sản phẩm cũ trước khi thêm mới
            ExcelData = new List<ProductModel>();

            // Đọc từng hàng dữ liệu trong file Excel
            for (int row = 2; row <= rowCount; row++) // Giả sử hàng đầu tiên là tiêu đề
            {
                var item = new ProductModel
                    {
                        Id = worksheet.Cell(row, 1).GetString(),
                        Name = worksheet.Cell(row, 2).GetString(),
                        Price = worksheet.Cell(row, 3).GetDouble(),
                        ImportPrice = worksheet.Cell(row, 4).GetDouble(),
                        Description = worksheet.Cell(row, 5).GetString(),
                        CategoryId = (int)worksheet.Cell(row, 6).GetDouble(),
                        BrandId = (int)worksheet.Cell(row, 7).GetDouble(),
                    };
                ExcelData.Add(item);
            }
            return true;
        }
        catch (Exception ex)
        {
            ExcelData = null!;
            return false;
        }
    }

    private async void ExportToExcel()
    {
        var response = await Http.GetAsync("api/product/export-excel");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsByteArrayAsync();
            var fileName = "products.xlsx";

            // Gọi JavaScript để tạo file và tải xuống
            await JS.InvokeVoidAsync("downloadFileFromByteArray", fileName, content);
        }
        else
        {
            Console.WriteLine("Không thể tải file Excel.");
        }
    }
    //Tìm kiếm
    private Func<ProductModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.Quantity} {x.Price}".Contains(_searchString))
            return true;

        return false;
    };
    private void OnRowClick(DataGridRowClickEventArgs<ProductModel> args)
    {
        OpenViewDialog(args.Item);
        StateHasChanged();
    }
    private async Task OpenEditProductDialog(ProductModel product)
    {

        loading = true;
        var parameters = new DialogParameters { ["ExistingProduct"] = product }; // Truyền product hiện tại vào dialog
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<EditProductDialog>("Edit Product", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ProductModel updatedProduct)
        {
            // Cập nhật danh sách sản phẩm khi dialog đóng
            var index = Data.FindIndex(p => p.Id == updatedProduct.Id);
            if (index >= 0)
            {
                Data[index] = updatedProduct;
                await Service.Update(updatedProduct); // Gọi API để cập nhật sản phẩm
                Snackbar.Add("Cập nhật sản phẩm thành công!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Cập nhật sản phẩm không thành công!", Severity.Error);
            }
            StateHasChanged(); // Cập nhật lại giao diện
        }
        loading = false;
    }
    void StartedEditingItem(ProductModel item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        tempItem = item;
    }

    void CanceledEditingItem(ProductModel item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    private async void Recover(ProductModel item)
    {
        await Service.Recover(item);
        Data.Insert(0, item);
        StateHasChanged();
    }
    void ShowMessage(string msg, string key = null!)
    {
        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };
        Snackbar.Add(msg, Severity.Info, configure: config, key: key);
    }
    #endregion

    #region Xóa
    private async Task ShowDeleteConfirmation(ProductModel item)
    {
        var parameters = new DialogParameters { ["Message"] = $"Hãy cân nhắc kỹ trước khi xóa {item.Name}" };
        var options = new DialogOptions { CloseButton = false, CloseOnEscapeKey = true };

        var dialog = DialogService.Show<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            DeleteItem(item);
        }
    }
    private async Task OpenDialogAsync()
    {
        loading = true;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddProductDialog>("Thêm sản phẩm", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ProductModel newProduct)
        {
            // Thêm sản phẩm mới vào danh sách
            await Task.Delay(500);
            if (!string.IsNullOrEmpty(newProduct.Id))
            {
                Data.Insert(0, newProduct);
                Snackbar.Add("Đã thêm sản phẩm thành công!", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Đã xảy ra lỗi :(", Severity.Error);
            }
        }
        loading = false;
    }

    void ShowDetailProduct(ProductModel item)
    {
        OpenDialogAsync();
    }

    private async void DeleteItem(ProductModel item)
    {

        var result = await Service.Delete(item.Id); //gọi api xóa trên server
        if (result == true) //kiểm tra kết quả
        {
            Data.Remove(item); //Xóa tại frontend
            StateHasChanged();
            //Snackbar.Add($"Xóa thành công", Severity.Info);
            //tạo toast thông báo
            Snackbar.Add($"Xóa thành công", Severity.Info, c =>
            {
                c.SnackbarVariant = Variant.Filled;
                c.Action = "Hoàn tác"; //tạm tắt tính năng này
                c.ActionColor = Color.Tertiary;
                c.Onclick = snakbar =>
                    {
                        Recover(item);
                        return Task.CompletedTask;
                    };
            });
        }
        else
        {
            Snackbar.Add($"Không thể xóa", Severity.Error);
        }
    }

    #endregion
    private void Category(MouseEventArgs e)
    {
        Navigation.NavigateTo("weather");
    }

    private void OpenViewDialog(ProductModel product)
    {
        var parameters = new DialogParameters { ["product"] = product }; //gửi tham chiếu tới dialog
        var options = new DialogOptions { CloseOnEscapeKey = true }; //cho phép tắt dialog khi bấm nút Esc

        DialogService.Show<ViewProductDialog>("Chi tiết sản phẩm", parameters, options); //Bật dialog
    }


   
}
@code{
    #region suplier
    private async Task ShowDeleteSuplierConfirm(SuplierModel model)
    {
        var result = await SuplierService.Delete(model.Id);
        if (result)
        {
            Snackbar.Add("Xóa thành công", Severity.Success);
            supliers.Remove(model);
        }
        else
        {
            Snackbar.Add("Xóa thất bại", Severity.Error);
        }
    }
    private async Task OpenEditSuplierDialog(SuplierModel suplier)
    {
        loading = true;
        var parameters = new DialogParameters { ["ExistingSuplier"] = suplier }; // Đảm bảo tên tham số khớp với form dialog
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<EditSuplierDialog>("Edit Supplier", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SuplierModel updatedSuplier)
        {
            // Cập nhật dữ liệu sau khi dialog được đóng
            var index = supliers.FindIndex(s => s.Id == updatedSuplier.Id);
            if (index >= 0)
            {
                supliers[index] = updatedSuplier;
                await SuplierService.Update(updatedSuplier);
                Snackbar.Add("Cập nhật thành công!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Không cập nhật thành công nhà cung cấp!", Severity.Error);
            }
            StateHasChanged(); // Đảm bảo UI cập nhật
        }
        loading = false;
    }

    void StartedEditingItem(SuplierModel model)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(model)}");
        SuplierItem = model;
    }

    void CanceledEditingItem(SuplierModel model)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(model)}");
    }

    private void RecoverSuplier(SuplierModel suplier)
    {
        supliers.Insert(0, suplier); // Khôi phục nhà cung cấp đã xóa
        StateHasChanged();
    }

    

    #endregion
}